#    Klassi Automated Testing Tool
#    Created by Larry Goddard
#
#    Copyright Â© klassitech 2016 - Larry Goddard <larryg@klassitech.co.uk>
#
#    Licensed under the Apache License, Version 2.0 (the "License");
#    you may not use this file except in compliance with the License.
#    You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
#    Javascript Node CircleCI 2.0 configuration file
#
#    Check https://circleci.com/docs/2.0/language-javascript/ for more details

version: 2.1

references:
  filter_only_testable_branches: &filter_only_testable_branches
    filters:
      branches:
        only:
          - master # git flow production branch
          - develop # git flow integration branch
          - /feature\/.*/ # git flow feature branches
          - /bugfix\/.*/ # git flow bugfix branches
          - /release\/.*/ # git flow release branches
          - /hotfix\/.*/ # git flow hotfix branches
          - /support\/.*/ # git flow support branches

  filter_ignore_wip_branches: &filter_ignore_wip_branches
    filters:
      branches:
        ignore:
          - /[a-z]{2}_wip.*/ # wip branches with initials prefix, e.g. mw_wip
          - /wip\/.*/ # wip branches with wip/ prefix, e.g. wip/foo
          - /poc\/.*/ # poc branches with poc/ prefix, e.g. poc/bar

  filter_only_integration_branches: &filter_only_integration_branches
    filters:
      branches:
        only:
          - develop # git flow production branch
          - /testfix\/.*/ # testfix branches with testfix/ prefix. e.g. testfix/foo

  filter_only_releasable_branches: &filter_only_releasable_branches
    filters:
      branches:
        only:
          - master # git flow production branch
          - main # git flow production branch
          - /hotfix\/.*/ # git flow hotfix branches
          - /release\/.*/ # git flow release branches

jobs:
  ###########################################
  # Acceptance test base configuration      #
  ###########################################
  acceptance_test_base: &acceptance_test_base
    docker:
      - image: circleci/node:12.14.1-browsers
    working_directory: ~/klassiG
    steps:
      - run:
          name: Avoid hosts unknown for github
          command: mkdir ~/.ssh/ && echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > ~/.ssh/config

      - run:
          name: Checkout klassi framework repo
          command: git clone git@github.com:larryg01/klassi-js.git

      - run:
          name: Check out the working branch
          path: ~/klassiG/klassi-js
          command: git checkout ${CIRCLE_BRANCH}

      - run:
          name: Generate dependency cache key
          command: cat ~/klassiG/klassi-js/package.json > CACHE_KEY

      - restore_cache:
          key: klassi-yarn-cache-{{ checksum "CACHE_KEY" }}

      - run:
          name: Install klassi framework dependencies
          path: ~/klassiG/klassi-js
          command: yarn install

      # Save yarn cache, don't include node modules because we end up with an
      # archive so large that unarchiving takes longer than the yarn install
      - save_cache:
          paths:
            - ~/.cache/yarn
            - ~/klassiG/klassi-js/yarn.lock
          key: klassi-yarn-cache-{{ checksum "CACHE_KEY" }}

      - run:
          name: Run acceptance tests
          path: ~/klassiG/klassi-js
          command: yarn run cibs${STAGE} ${BROWSER}

      - store_artifacts:
          path: ~/klassiG/klassi-js/artifacts

      - store_test_results:
          command: sleep 2
          path: ~/klassiG/klassi-js/reports

  acceptance_test_chrome:
    <<: *acceptance_test_base
    environment: { BROWSER: 'chrome', STAGE: 'uat' }

  acceptance_test_edge:
    <<: *acceptance_test_base
    environment: { BROWSER: 'edge', STAGE: 'uat' }

  acceptance_test_firefox:
    <<: *acceptance_test_base
    environment: { BROWSER: 'firefox', STAGE: 'uat' }

  acceptance_test_safari:
    <<: *acceptance_test_base
    environment: { BROWSER: 'safari', STAGE: 'uat' }

  acceptance_test_iexplorer:
    <<: *acceptance_test_base
    environment: { BROWSER: 'iexplorer', STAGE: 'uat' }

  acceptance_test_tabletiPad:
    <<: *acceptance_test_base
    environment: { BROWSER: 'tabletiPad', STAGE: 'uat'  }

  acceptance_test_tabletGalaxy:
    <<: *acceptance_test_base
    environment: { BROWSER: 'tabletGalaxy', STAGE: 'uat'  }

  dev_acceptance_test_chrome:
    <<: *acceptance_test_base
    environment: { BROWSER: 'chrome', STAGE: 'dev' }

workflows:
  version: 2
  build_and_test:
    jobs:
      - acceptance_test_chrome:
          <<: *filter_only_releasable_branches

      - acceptance_test_edge:
          <<: *filter_only_releasable_branches

      - acceptance_test_firefox:
          <<: *filter_only_releasable_branches

      - acceptance_test_safari:
          <<: *filter_only_releasable_branches

      - acceptance_test_iexplorer:
          <<: *filter_only_releasable_branches

      - acceptance_test_tabletGalaxy:
          <<: *filter_only_releasable_branches

      - acceptance_test_tabletiPad:
          <<: *filter_only_releasable_branches

      - dev_acceptance_test_chrome:
          <<: *filter_only_integration_branches

  nightly_run:
    triggers:
      - schedule:
          cron: "00 20 * * *"
          filters:
            branches:
              only:
                - main

    jobs:
      - acceptance_test_chrome
      - acceptance_test_edge
      - acceptance_test_firefox
      - acceptance_test_safari
      - acceptance_test_iexplorer
      - acceptance_test_tabletGalaxy
      - acceptance_test_tabletiPad
